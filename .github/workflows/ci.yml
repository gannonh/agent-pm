name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Lint
        run: npm run lint:strict

      - name: Sync coverage thresholds
        run: npm run sync-coverage

      - name: Test
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: gannonh/agent-pm

  publish:
    name: Publish to npm
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          rm -rf node_modules
          rm -f package-lock.json
          npm install

      - name: Build package
        run: npm run build

      - name: Set executable permissions
        run: |
          chmod +x dist/*.js
          ls -la dist/*.js

      - name: Check version and determine if publish is needed
        id: check_version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"

          # Get latest version from npm (if it exists)
          if LATEST_VERSION=$(npm view @gannonh/agent-pm version 2>/dev/null); then
            echo "Latest published version: $LATEST_VERSION"

            # Compare versions using node
            IS_HIGHER=$(node -e "const semver = require('semver'); console.log(semver.gt('$CURRENT_VERSION', '$LATEST_VERSION') ? 'true' : 'false')")
            echo "is_higher=$IS_HIGHER" >> $GITHUB_OUTPUT

            if [ "$IS_HIGHER" = "true" ]; then
              echo "Current version is higher than latest published version. Proceeding with publish."
            else
              echo "Current version is not higher than latest published version. Skipping publish."
            fi
          else
            echo "No published version found. This appears to be the first publish."
            echo "is_higher=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.check_version.outputs.is_higher == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publish - version not higher
        if: steps.check_version.outputs.is_higher != 'true'
        run: echo "âœ… Build successful but publish skipped - current version is not higher than the latest published version."
